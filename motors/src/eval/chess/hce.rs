use strum::IntoEnumIterator;

use gears::games::{Board, Color};
use gears::games::chess::Chessboard;
use gears::games::chess::pieces::UncoloredChessPiece;
use gears::games::chess::pieces::UncoloredChessPiece::Bishop;
use gears::general::bitboards::Bitboard;
use gears::search::Score;

use crate::eval::Eval;

#[derive(Default, Debug)]
pub struct HandCraftedEval {}

/// Psqt values tuned on a combination of the zurichess and a dataset used by 4ku,
/// created by GCP using his engine Stoofvlees and filtered by cj5716 using Stockfish at depth 9,
/// using this tuner: https://github.com/GediminasMasaitis/texel-tuner.
#[rustfmt::skip]
const PSQTS: [[i32; 64]; 12] = [
        // pawn mg
        [
                0, 0, 0, 0, 0, 0, 0, 0,
                183, 195, 176, 200, 179, 165, 83, 72,
                68, 88, 119, 124, 127, 150, 136, 88,
                51, 77, 79, 84, 104, 96, 101, 77,
                40, 68, 68, 84, 84, 78, 88, 62,
                39, 65, 63, 64, 79, 71, 103, 70,
                39, 64, 59, 49, 69, 87, 113, 62,
                0, 0, 0, 0, 0, 0, 0, 0,
        ],
        // pawn eg
        [
                0, 0, 0, 0, 0, 0, 0, 0,
                245, 245, 246, 202, 204, 211, 256, 259,
                207, 209, 183, 164, 156, 142, 181, 182,
                147, 138, 121, 112, 104, 105, 123, 122,
                127, 124, 107, 104, 102, 103, 114, 108,
                122, 123, 107, 118, 111, 108, 112, 104,
                127, 128, 115, 123, 124, 113, 111, 106,
                0, 0, 0, 0, 0, 0, 0, 0,
        ],
        // knight mg
        [
                144, 193, 248, 283, 324, 235, 224, 205,
                287, 304, 338, 351, 337, 401, 302, 325,
                301, 340, 361, 372, 409, 410, 366, 329,
                301, 317, 341, 366, 345, 368, 325, 336,
                288, 305, 321, 321, 331, 325, 323, 298,
                268, 292, 306, 311, 323, 310, 314, 283,
                252, 266, 284, 297, 297, 301, 286, 281,
                214, 264, 250, 265, 270, 285, 267, 239,
        ],
        // knight eg
        [
                270, 324, 340, 329, 328, 320, 322, 242,
                313, 336, 339, 340, 335, 316, 329, 299,
                327, 341, 354, 358, 341, 340, 332, 318,
                337, 356, 367, 368, 372, 365, 357, 329,
                338, 348, 369, 372, 373, 363, 348, 329,
                321, 340, 351, 362, 361, 347, 335, 322,
                312, 330, 337, 341, 341, 334, 322, 320,
                299, 292, 322, 326, 327, 313, 299, 289,
        ],
        // bishop mg
        [
                284, 267, 273, 242, 250, 256, 300, 267,
                305, 330, 327, 307, 337, 339, 327, 316,
                316, 343, 341, 365, 355, 383, 362, 347,
                310, 324, 347, 360, 355, 350, 324, 310,
                302, 317, 323, 344, 341, 324, 318, 310,
                312, 321, 320, 325, 325, 320, 322, 325,
                315, 315, 327, 305, 313, 327, 333, 319,
                288, 313, 296, 285, 291, 292, 317, 297,
        ],
        // bishop eg
        [
                343, 351, 349, 360, 359, 350, 344, 339,
                329, 348, 351, 356, 346, 346, 349, 328,
                353, 351, 362, 350, 357, 357, 350, 347,
                350, 368, 360, 372, 367, 366, 365, 351,
                347, 363, 370, 368, 368, 367, 361, 339,
                344, 356, 363, 362, 368, 363, 347, 337,
                340, 340, 340, 354, 355, 344, 345, 321,
                326, 337, 322, 344, 341, 340, 324, 318,
        ],
        // rook mg
        [
                469, 455, 462, 471, 486, 491, 481, 509,
                443, 445, 466, 485, 471, 502, 486, 515,
                423, 443, 448, 452, 482, 480, 515, 486,
                403, 415, 422, 435, 440, 439, 446, 446,
                386, 392, 398, 414, 413, 398, 418, 410,
                379, 390, 397, 399, 405, 401, 436, 413,
                377, 391, 405, 404, 409, 410, 426, 393,
                397, 399, 409, 415, 418, 408, 423, 397,
        ],
        // rook eg
        [
                626, 638, 644, 639, 633, 627, 629, 618,
                636, 644, 646, 637, 639, 624, 623, 607,
                637, 637, 638, 635, 622, 618, 609, 609,
                638, 638, 642, 637, 626, 622, 618, 611,
                630, 632, 635, 632, 627, 627, 615, 608,
                621, 623, 622, 624, 620, 614, 594, 595,
                617, 618, 620, 621, 613, 609, 600, 606,
                613, 620, 628, 627, 619, 615, 610, 605,
        ],
        // queen mg
        [
                855, 869, 896, 928, 923, 940, 958, 911,
                887, 866, 876, 871, 878, 919, 892, 942,
                890, 887, 890, 904, 916, 956, 957, 946,
                876, 880, 884, 887, 890, 899, 898, 908,
                879, 875, 878, 884, 886, 884, 895, 898,
                874, 885, 880, 881, 885, 890, 902, 896,
                874, 882, 892, 892, 891, 899, 906, 912,
                873, 863, 870, 887, 877, 864, 882, 874,
        ],
        // queen eg
        [
                1172, 1182, 1197, 1183, 1187, 1173, 1133, 1159,
                1141, 1183, 1214, 1229, 1242, 1201, 1189, 1153,
                1144, 1169, 1200, 1204, 1214, 1194, 1159, 1152,
                1154, 1179, 1194, 1212, 1225, 1214, 1198, 1172,
                1147, 1178, 1184, 1206, 1198, 1193, 1174, 1160,
                1138, 1150, 1174, 1168, 1171, 1165, 1142, 1128,
                1132, 1135, 1130, 1138, 1140, 1115, 1087, 1059,
                1124, 1130, 1135, 1120, 1127, 1123, 1099, 1101,
        ],
        // king mg
        [
                54, 11, 39, -59, -4, 19, 55, 157,
                -64, -24, -56, 18, -5, -14, 13, -1,
                -82, 6, -58, -74, -30, 33, 5, -26,
                -61, -69, -88, -117, -111, -74, -82, -102,
                -68, -71, -96, -121, -118, -92, -93, -105,
                -37, -18, -68, -79, -72, -69, -28, -44,
                55, 13, -2, -34, -34, -17, 35, 43,
                47, 79, 51, -57, 15, -30, 59, 58,
        ],
        // king eg
        [
                -98, -42, -38, -2, -18, -7, -10, -99,
                -7, 20, 27, 11, 27, 43, 38, 2,
                8, 26, 40, 50, 47, 45, 47, 19,
                -1, 32, 46, 56, 58, 52, 47, 22,
                -10, 19, 39, 52, 52, 41, 29, 10,
                -15, 4, 22, 32, 31, 23, 5, -7,
                -38, -13, -3, 7, 9, 1, -19, -36,
                -67, -58, -39, -18, -45, -22, -49, -77,
        ],
];
const BISHOP_PAIR_MG: i32 = 23;
const BISHOP_PAIR_EG: i32 = 61;

const PIECE_PHASE: [i32; 6] = [0, 1, 1, 2, 4, 0];

impl Eval<Chessboard> for HandCraftedEval {
    fn eval(&self, pos: Chessboard) -> Score {
        let mut mg = Score(0);
        let mut eg = Score(0);
        let mut phase = 0;
        for color in Color::iter() {
            for piece in UncoloredChessPiece::pieces() {
                let mut bb = pos.colored_piece_bb(color, piece);
                if piece == Bishop && bb.0.count_ones() >= 2 {
                    mg += Score(BISHOP_PAIR_MG);
                    eg += Score(BISHOP_PAIR_EG);
                }
                while bb.has_set_bit() {
                    let idx = bb.pop_lsb();
                    let mg_table = piece as usize * 2;
                    let eg_table = mg_table + 1;
                    let square = match color {
                        Color::White => idx ^ 0b111_000,
                        Color::Black => idx,
                    };
                    mg += Score(PSQTS[mg_table][square]);
                    eg += Score(PSQTS[eg_table][square]);
                    phase += PIECE_PHASE[piece as usize];
                }
            }
            mg = -mg;
            eg = -eg;
        }
        let score = (mg * phase + eg * (24 - phase)) / 24;
        match pos.active_player() {
            Color::White => score,
            Color::Black => -score,
        }
    }
}
